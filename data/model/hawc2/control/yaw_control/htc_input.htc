begin dll;
    begin type2_dll;
        name yaw_control;
        filename ./control/control.dll ;
        dll_subroutine_init   init;
        dll_subroutine_update update;
        ; array size of outgoing (wrt HAWC2) and ingoing data
        arraysizes_init 8 1 ;
        arraysizes_update 3 1 ;
        begin init;
            constant 1 [yaw_c_tstop] ;  time stop
            ; required for the low pass filter on the error signal
            ; error = lowpassfilter(yaw_angle) - reference_angle
            constant 2 1.0  ;  f_0       low pass cut off freq [Hz]
            constant 3 [yaw_c_damp]  ;  ksi critical damping ratio filter
            ; when tuning, maintain the ratio between prop and int gain
            ; start from very low value and increase until good 
            ; performance (holds for both propertianal as integral gain)
            ; for the free yawing OJF model, following ratios worked well:
            ; Kp=10, Ki=7, Kd=30
            constant 4 [yaw_c_gain_pro] ; Proportional gain
            constant 5 [yaw_c_gain_int] ; Integral gain
            constant 6 [yaw_c_gain_dif] ; Differential gain
            constant 7 [yaw_c_min] ;  Lower boundary applied yaw moment [Nm]
            constant 8 [yaw_c_max] ;  Upper boundary applied yaw moment [Nm]
        end init;
        begin output;
            ; put time firs! when having it as last in the list, the value
            ; was not passed on correctly to DLL, WHY????
            general time;
            ; 5: units are convert to degrees
            ; only 1: only the angle is transferred
            constraint bearing1 yaw_rot 5 only 1; 
            general constant [yaw_c_ref_angle]; the reference yaw angle
        end output;
        ;
        begin actions;
            ; input vector, input for HAWC2, output for DLL
            mbdy moment_ext tower 1 -3 tower;  moment to apply to tower [Nm]
        end actions;
    end type2_dll;
end dll;
